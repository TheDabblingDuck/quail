'use strict'
var __importDefault =
	(this && this.__importDefault) ||
	function (mod) {
		return mod && mod.__esModule ? mod : { default: mod }
	}
Object.defineProperty(exports, '__esModule', { value: true })
var version_compare_1 = __importDefault(require('version-compare'))
var regex = /^([<>=]*)\s*([\d.]+)\s*$/
/**
 * Compare two versions quickly.
 * @param current Is this version greater, equal to, or less than the other?
 * @param other The version to compare against the current version
 * @return 1 if current is greater than other, 0 if they are equal or equivalent, and -1 if current is less than other
 */
function withinVersionRange(subject, range) {
	var result = false
	if (!Array.isArray(range)) range = String(range).split(/\s*\|\|\s*/)
	for (var _i = 0, range_1 = range; _i < range_1.length; _i++) {
		var part = range_1[_i]
		var parts = String(part).match(regex) || []
		var _ = parts[0],
			comparator = parts[1],
			version = parts[2]
		if (!version)
			throw new Error('version range was invalid: ' + JSON.stringify(part))
		var diff = version_compare_1.default(subject, version)
		var pass = false
		switch (comparator) {
			case '>=':
				pass = diff >= 0
				break
			case '>':
				pass = diff === 1
				break
			case '<':
				pass = diff === -1
				break
			case '<=':
				pass = diff <= 0
				break
			case '=':
			case '':
				pass = diff === 0
				break
			default:
				throw new Error(
					'version range comparator was invalid: ' + JSON.stringify(part)
				)
		}
		if (pass) result = true
	}
	return result
}
exports.default = withinVersionRange
